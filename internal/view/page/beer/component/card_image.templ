package component

import (
	"fmt"

	"github.com/my-pet-projects/collection/internal/model"
)

const (
	CdnBaseURL = "https://collection.seasharper.com/cdn-cgi/image"
	S3BaseURL  = "https://beer-collection-bucket.s3.eu-central-1.amazonaws.com/original"
)

templ bottleImage(media model.BeerMedia) {
	{{ originalImageURL := fmt.Sprintf("%s/%s", S3BaseURL, media.Media.ExternalFilename) }}
	{{ resizedImageURL := fmt.Sprintf("%s/width=100,quality=25/%s", CdnBaseURL, originalImageURL) }}
	<div
		x-data={ fmt.Sprintf(`{
            isIntersected: false,
            imageLoaded: false,
            imageSrc: '%s'
        }`, resizedImageURL) }
		x-intersect.threshold.25="isIntersected = true"
		class="order-first flex flex-shrink-0 items-end justify-center"
	>
		<div class="flex h-20 w-12 items-center justify-center rounded-lg border border-slate-200/60 bg-white p-1.5 shadow-sm transition duration-300 ease-in-out hover:scale-105 sm:h-28 sm:w-14 sm:rounded-xl sm:p-2">
			<!-- Shimmer placeholder -->
			<div
				x-show="isIntersected && !imageLoaded"
				class="h-full w-full animate-pulse rounded-lg bg-slate-200"
			></div>
			<!-- Actual image -->
			<img
				x-bind:class="imageLoaded ? 'h-full w-auto object-contain opacity-100 transition-opacity duration-700 ease-out' : 'h-full w-auto object-contain opacity-0 absolute transition-opacity duration-700 ease-out'"
				x-bind:src="isIntersected ? imageSrc : null"
				@load="imageLoaded = true"
				@error="imageLoaded = true"
				alt="bottle image"
				loading="lazy"
				decoding="async"
				onerror={ OnImageLoadError(templ.JSExpression("this"), originalImageURL) }
			/>
		</div>
	</div>
}

templ capImage(media model.BeerMedia) {
	{{ originalImageURL := fmt.Sprintf("%s/%s", S3BaseURL, media.Media.ExternalFilename) }}
	{{ resizedImageURL := fmt.Sprintf("%s/width=100,quality=25/%s", CdnBaseURL, originalImageURL) }}
	<div
		x-data={ fmt.Sprintf(`{
            isIntersected: false,
            imageLoaded: false,
            imageSrc: '%s'
        }`, resizedImageURL) }
		x-intersect.threshold.25="isIntersected = true"
		class="flex flex-shrink-0 items-end justify-center"
	>
		<div class="flex h-20 w-20 items-center justify-center rounded-full border border-slate-200/60 bg-white p-1.5 shadow-sm transition duration-300 ease-in-out hover:scale-105 sm:h-28 sm:w-28 sm:p-2">
			<!-- Shimmer placeholder -->
			<div
				x-show="isIntersected && !imageLoaded"
				class="h-full w-full animate-pulse rounded-full bg-slate-200"
			></div>
			<!-- Actual image -->
			<img
				x-bind:class="imageLoaded ? 'h-full w-auto object-contain opacity-100 transition-opacity duration-700 ease-out' : 'h-full w-auto object-contain opacity-0 absolute transition-opacity duration-700 ease-out'"
				x-bind:src="isIntersected ? imageSrc : null"
				@load="imageLoaded = true"
				@error="imageLoaded = true"
				alt="cap image"
				loading="lazy"
				decoding="async"
				onerror={ OnImageLoadError(templ.JSExpression("this"), originalImageURL) }
			/>
		</div>
	</div>
}

templ labelImage(media model.BeerMedia) {
	{{ originalImageURL := fmt.Sprintf("%s/%s", S3BaseURL, media.Media.ExternalFilename) }}
	{{ resizedImageURL := fmt.Sprintf("%s/width=100,quality=25/%s", CdnBaseURL, originalImageURL) }}
	<div
		x-data={ fmt.Sprintf(`{
            isIntersected: false,
            imageLoaded: false,
            imageSrc: '%s'
        }`, resizedImageURL) }
		x-intersect.threshold.25="isIntersected = true"
		class="order-last flex min-w-0 flex-1 items-end justify-center"
	>
		<div class="flex h-20 w-full items-center justify-center overflow-hidden rounded-lg border border-slate-200/60 bg-white p-1.5 shadow-sm transition duration-300 ease-in-out hover:scale-105 sm:h-28 sm:rounded-xl sm:p-2">
			<!-- Shimmer placeholder -->
			<div
				x-show="isIntersected && !imageLoaded"
				class="h-full w-full animate-pulse rounded-lg bg-slate-200"
			></div>
			<!-- Actual image -->
			<img
				x-bind:class="imageLoaded ? 'h-full w-auto object-contain opacity-100 transition-opacity duration-700 ease-out' : 'h-full w-auto object-contain opacity-0 absolute transition-opacity duration-700 ease-out'"
				x-bind:src="isIntersected ? imageSrc : null"
				@load="imageLoaded = true"
				@error="imageLoaded = true"
				alt="label image"
				loading="lazy"
				decoding="async"
				onerror={ OnImageLoadError(templ.JSExpression("this"), originalImageURL) }
			/>
		</div>
	</div>
}

templ capImageWithIndex(media model.BeerMedia, index int) {
	{{ originalImageURL := fmt.Sprintf("%s/%s", S3BaseURL, media.Media.ExternalFilename) }}
	{{ resizedImageURL := fmt.Sprintf("%s/width=100,quality=25/%s", CdnBaseURL, originalImageURL) }}
	<div
		x-data={ fmt.Sprintf(`{
            isIntersected: false,
            imageLoaded: false,
            imageSrc: '%s'
        }`, resizedImageURL) }
		x-intersect.threshold.25="isIntersected = true"
		x-show={ fmt.Sprintf("currentCapIndex === %d", index) }
		class="flex flex-shrink-0 items-end justify-center"
	>
		<div class="flex h-20 w-20 items-center justify-center rounded-full border border-slate-200/60 bg-white p-1.5 shadow-sm transition duration-300 ease-in-out hover:scale-105 sm:h-28 sm:w-28 sm:p-2">
			<!-- Shimmer placeholder -->
			<div
				x-show="isIntersected && !imageLoaded"
				class="h-full w-full animate-pulse rounded-full bg-slate-200"
			></div>
			<!-- Actual image -->
			<img
				x-bind:class="imageLoaded ? 'h-full w-auto object-contain opacity-100 transition-opacity duration-700 ease-out' : 'h-full w-auto object-contain opacity-0 absolute transition-opacity duration-700 ease-out'"
				x-bind:src="isIntersected ? imageSrc : null"
				@load="imageLoaded = true"
				@error="imageLoaded = true"
				alt="cap image"
				loading="lazy"
				decoding="async"
				onerror={ OnImageLoadError(templ.JSExpression("this"), originalImageURL) }
			/>
		</div>
	</div>
}

templ capThumbnail(media model.BeerMedia, idx int) {
	{{ originalImageURL := fmt.Sprintf("%s/%s", S3BaseURL, media.Media.ExternalFilename) }}
	{{ resizedImageURL := fmt.Sprintf("%s/width=80,quality=25/%s", CdnBaseURL, originalImageURL) }}
	<button
		@click={ fmt.Sprintf("currentCapIndex = %d", idx) }
		x-bind:class={ fmt.Sprintf("currentCapIndex === %d ? 'ring-2 ring-blue-500 ring-offset-1 scale-100 opacity-100' : 'ring-1 ring-slate-200 scale-90 opacity-50 hover:opacity-80 hover:scale-95'", idx) }
		class="flex h-12 w-12 flex-shrink-0 items-center justify-center rounded-full border border-slate-200/60 bg-white p-1 shadow-sm transition-all duration-200 sm:h-14 sm:w-14"
		type="button"
	>
		<img
			src={ resizedImageURL }
			alt={ fmt.Sprintf("cap %d", idx+1) }
			class="h-full w-full rounded-full object-contain"
			loading="lazy"
			decoding="async"
			onerror={ OnImageLoadError(templ.JSExpression("this"), originalImageURL) }
		/>
	</button>
}
