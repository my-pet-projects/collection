package component

import (
	"fmt"
	"strconv"
	"strings"

	"github.com/my-pet-projects/collection/internal/model"
)

templ Card(beer model.Beer) {
	{{ var capMedias []model.BeerMedia }}
	for _, media := range beer.BeerMedias {
		if media.Type.IsCap() {
			{{ capMedias = append(capMedias, media) }}
		}
	}
	<div
		x-data="{ currentCapIndex: 0 }"
		class="group overflow-hidden rounded-xl bg-white shadow-md transition-all duration-300 hover:shadow-lg sm:rounded-2xl sm:hover:-translate-y-2 sm:hover:shadow-xl"
	>
		<div class="p-4 sm:p-6">
			<!-- Header -->
			<div class="mb-4 flex items-center justify-between sm:mb-6">
				<!-- Brand and Country -->
				<div class="flex min-w-0 flex-1 items-center space-x-3 sm:space-x-4">
					if beer.HasCountry() {
						{{ countryCode := beer.GetCountry().Cca2 }}
						<div class="flex-shrink-0">
							<img
								src={ fmt.Sprintf("https://flagcdn.com/w40/%s.png", strings.ToLower(countryCode)) }
								alt={ fmt.Sprintf("%s flag", countryCode) }
								class="h-5 w-7 rounded border border-white object-cover shadow-sm ring-1 ring-gray-200"
								loading="lazy"
								decoding="async"
							/>
						</div>
					}
					<div class="min-w-0 flex-1">
						<div class="flex items-center gap-2">
							<h2 class="truncate text-lg font-bold tracking-tight text-slate-800 sm:text-xl lg:text-2xl">{ beer.Brand }</h2>
							<span class="flex-shrink-0 text-xs text-slate-400 sm:text-sm">#{ strconv.Itoa(beer.ID) }</span>
						</div>
					</div>
				</div>
				<!-- Edit Button -->
				<a
					href={ templ.URL(fmt.Sprintf("/workspace/beer/%d/overview", beer.ID)) }
					class="flex h-8 w-8 items-center justify-center rounded-full bg-gray-100 text-gray-600 transition-all duration-200 hover:bg-gray-200 hover:text-gray-800 sm:opacity-0 sm:group-hover:opacity-100"
					aria-label="Edit beer"
				>
					<svg class="h-4 w-4" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
						<path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"></path>
						<path d="m15 5 4 4"></path>
					</svg>
				</a>
			</div>
			<!-- Images Section -->
			<div class="mb-3 flex flex-wrap items-end gap-2 rounded-lg bg-gray-50 p-2 sm:flex-nowrap">
				{{ capIndex := 0 }}
				for _, media := range beer.BeerMedias {
					if media.Type.IsBottle() {
						@bottleImage(media)
					} else if media.Type.IsCap() {
						@capImageWithIndex(media, capIndex)
						{{ capIndex++ }}
					} else if media.Type.IsLabel() {
						@labelImage(media)
					}
				}
			</div>
			<!-- Cap Gallery Section -->
			if len(capMedias) > 1 {
				<div class="mb-4 sm:mb-6">
					<!-- Compact thumbnail gallery -->
					<div class="flex flex-wrap items-center justify-center gap-1">
						for idx, capMedia := range capMedias {
							@capThumbnail(capMedia, idx)
						}
					</div>
				</div>
			}
			<!-- Info Section -->
			<div class="mb-4 space-y-2 sm:mb-6 sm:space-y-3">
				if beer.HasBrewery() {
					{{ brewery := beer.Brewery }}
					<div class="flex items-center gap-2 text-slate-600 sm:gap-3">
						<div class="flex h-6 w-6 flex-shrink-0 items-center justify-center rounded-md bg-blue-50 text-blue-600 sm:h-8 sm:w-8 sm:rounded-lg">
							<svg class="h-3 w-3 sm:h-4 sm:w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-7 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
							</svg>
						</div>
						<div>
							<div class="muted text-xs">Brewery</div>
							<div class="min-w-0 flex-1 truncate text-xs font-semibold sm:text-sm">{ brewery.Name }</div>
						</div>
					</div>
					<div class="flex items-center gap-2 text-slate-600 sm:gap-3">
						<div class="flex h-6 w-6 flex-shrink-0 items-center justify-center rounded-md bg-emerald-50 text-emerald-600 sm:h-8 sm:w-8 sm:rounded-lg">
							<svg class="h-3 w-3 sm:h-4 sm:w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
							</svg>
						</div>
						<div>
							<div class="muted text-xs">Location</div>
							<div class="min-w-0 flex-1 truncate text-xs font-semibold sm:text-sm">{ brewery.GetCityName() }, { brewery.GetCountryName() }</div>
						</div>
					</div>
				}
				if beer.HasCapSlots() {
					{{ capSlots := beer.GetCapSlots() }}
					<div class="flex items-center gap-2 text-slate-600 sm:gap-3">
						<div class="flex h-6 w-6 flex-shrink-0 items-center justify-center rounded-md bg-purple-50 text-purple-600 sm:h-8 sm:w-8 sm:rounded-lg">
							<svg class="h-3 w-3 sm:h-4 sm:w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2v2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
							</svg>
						</div>
						<div>
							<div class="muted text-xs">Slot</div>
							<div class="text-xs font-medium text-slate-700 sm:text-sm">
								{ strings.Join(capSlots, " â€¢ ") }
							</div>
						</div>
					</div>
				}
			</div>
			<!-- Badge section -->
			if beer.HasBeerStyle() {
				<div class="flex items-center">
					<!-- Beer Style Badge -->
					<div class="inline-flex items-center rounded-full border border-slate-300/50 bg-gradient-to-r from-slate-100 to-slate-200 px-3 py-1.5 shadow-sm sm:px-4 sm:py-2">
						<span class="text-xs font-medium text-slate-700 sm:text-sm">{ beer.BeerStyle.Name }</span>
					</div>
				</div>
			}
		</div>
	</div>
}
