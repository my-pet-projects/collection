package workspace

import (
	"fmt"
	"github.com/my-pet-projects/collection/internal/model"
)

type BeerListData struct {
	Beers        []model.Beer
	CurrentPage  int
	TotalPages   int
	TotalResults int
}

templ BeerListPage(page BeerPageData) {
	@adminLayout(page.Page, beersList())
}

templ beersList() {
	<div class="flex-1 px-10 py-6">
		<div>
			<div class="mb-6">
				<h1 class="border-b border-gray-400 pb-2 text-2xl font-semibold text-slate-800">Beer list</h1>
			</div>
		</div>
		<div class="ml-auto flex items-center space-x-2 sm:space-x-3">
			<a href="/workspace/beer/create" type="button" class="bg-primary-700 hover:bg-primary-800 focus:ring-primary-300 bg-primary-600 hover:bg-primary-700 focus:ring-primary-800 inline-flex w-1/2 items-center justify-center rounded-lg px-3 py-2 text-center text-sm font-medium focus:ring-4 sm:w-auto">
				<svg class="-ml-1 mr-2 h-5 w-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd"></path></svg>
				Add beer
			</a>
		</div>
		<div id="beer-list-errors" class="p-4"></div>
		<div
			id="beer-list"
			hx-get="/beers"
			hx-swap="innerHTML"
			hx-target="#beer-list"
			hx-trigger="load"
			hx-indicator=".htmx-indicator"
			hx-ext="response-targets"
			hx-target-error="#beer-list-errors"
			class="grid grid-cols-3 gap-x-8 gap-y-5"
		></div>
		<img class="htmx-indicator m-4 mx-auto" alt="Loading..." width="30" src="/static/img/tail-spin.svg"/>
		<div id="load-more-errors" class="p-4"></div>
	</div>
}

templ BeerList(data BeerListData) {
	for idx, beer := range data.Beers {
		<div class="max-w-sm rounded-lg border border-gray-200 bg-white p-6 shadow dark:border-gray-700 dark:bg-gray-800">
			<div class="flex items-center">
				<h6 class="mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white">{ beer.Brand } | { fmt.Sprintf("%d", beer.ID) }</h6>
				<a href={ templ.URL(fmt.Sprintf("/workspace/beer/%d", beer.ID)) } class="ring-offset-background focus-visible:ring-ring hover:bg-accent hover:text-accent-foreground inline-flex h-10 w-10 items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50">
					<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4" data-darkreader-inline-stroke="" style="--darkreader-inline-stroke: currentColor;">
						<path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"></path>
						<path d="m15 5 4 4"></path>
					</svg>
					<span class="sr-only">Edit</span>
				</a>
			</div>
			<p class="mb-3 font-normal text-gray-700 dark:text-gray-400">{ beer.BeerStyle.Name }</p>
			if beer.Brewery != nil {
				<p class="mb-3 font-normal text-gray-700 dark:text-gray-400">{ beer.Brewery.Name }</p>
				<p class="mb-3 font-normal text-gray-700 dark:text-gray-400">{ beer.Brewery.City.Name }, { beer.Brewery.City.Country.NameCommon }</p>
			}
			<div class="flex">
				for _, media := range beer.BeerMedias {
					<div
						x-data={ fmt.Sprintf("{ isLoaded: false, imageSrc: 'https://beer-collection-bucket.s3.eu-central-1.amazonaws.com/preview/%s' }", media.Media.ExternalFilename) }
						class={ templ.KV("order-first", media.Type == 1), templ.KV("order-last", media.Type == 2) }
					>
						<img
							:src="isLoaded ? `${imageSrc}` : `/static/img/tail-spin.svg`"
							x-intersect.threshold.25="isLoaded = true"
							class="aspect-square w-28 object-contain"
							alt=""
						/>
					</div>
				}
			</div>
			if idx == len(data.Beers)-1 &&  data.CurrentPage < data.TotalPages {
				<span
					hx-get={ fmt.Sprintf("/beers?page=%d", data.CurrentPage+1) }
					hx-trigger="intersect once"
					hx-swap="beforeend"
					hx-target="#beer-list"
					hx-indicator=".htmx-indicator"
					hx-target-error="#load-more-errors"
				></span>
			}
		</div>
	}
}
