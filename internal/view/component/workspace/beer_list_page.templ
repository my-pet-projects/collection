package workspace

import (
	"fmt"
	"github.com/my-pet-projects/collection/internal/model"
	"github.com/my-pet-projects/collection/internal/view/layout"
	"strings"
)

type BeerListData struct {
	Beers        []model.Beer
	Query        string
	CurrentPage  int
	TotalPages   int
	TotalResults int
}

templ BeerListPage(page BeerPageData) {
	@layout.BaseLayout() {
		@beersList()
	}
}

templ beersList() {
	<div class="container mx-auto px-4 py-4">
		<div class="mb-6 flex items-center justify-between">
			<h1 class="text-3xl font-bold text-slate-800">Beer list</h1>
			<a href="/workspace/beer/create" type="button" class="ring-offset-background focus-visible:ring-ring [&_svg]:size-4 flex h-10 items-center justify-center gap-2 whitespace-nowrap rounded-md bg-black px-4 py-2 text-sm font-semibold text-white shadow-md transition-all duration-300 hover:bg-gray-800 hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-opacity-50 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0" type="button" aria-haspopup="dialog" aria-expanded="false" aria-controls="radix-:r0:" data-state="closed">
				<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-plus">
					<path d="M5 12h14"></path><path d="M12 5v14"></path>
				</svg>
				Add Beer
			</a>
		</div>
		<input
			id="search"
			name="query"
			value=""
			type="text"
			hx-get="/beers"
			hx-swap="innerHTML"
			hx-target="#beer-list"
			hx-trigger="keyup changed delay:250ms from:#search"
			hx-indicator=".htmx-indicator"
			class="ring-offset-background file:text-foreground placeholder:text-muted-foreground focus-visible:ring-ring mb-6 flex h-10 w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-sm file:border-0 file:bg-transparent file:text-sm file:font-medium focus:border-black focus:ring-black focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
			placeholder="Search by beer or brewery name..."
		/>
		<div id="beer-list-errors"></div>
		<div
			id="beer-list"
			hx-get="/beers"
			hx-swap="innerHTML"
			hx-target="#beer-list"
			hx-trigger="load"
			hx-indicator=".htmx-indicator"
			hx-ext="response-targets"
			hx-target-error="#beer-list-errors"
			class="grid grid-cols-3 gap-x-8 gap-y-5"
		></div>
		<img class="htmx-indicator m-4 mx-auto" alt="Loading..." width="30" src="/assets/img/tail-spin.svg"/>
		<div id="load-more-errors" class="p-4"></div>
	</div>
}

templ BeerList(data BeerListData) {
	for idx, beer := range data.Beers {
		<div class="group overflow-hidden rounded-lg bg-white shadow-md transition-all duration-300 hover:shadow-lg">
			<div class="p-6">
				<div class="mb-4 flex items-start justify-between">
					<div class="mb-2 flex items-center">
						if beer.Brewery != nil {
							<img
								src={ fmt.Sprintf("https://flagcdn.com/w40/%s.png", strings.ToLower(beer.Brewery.City.CountryCode)) }
								alt={ fmt.Sprintf("%s flag", beer.Brewery.City.CountryCode) }
								class="mr-4 h-4 w-6 rounded object-cover"
							/>
						}
						<h2 class="text-2xl font-bold text-gray-900">{ beer.Brand } | { fmt.Sprintf("%d", beer.ID) }</h2>
					</div>
					<a
						href={ templ.URL(fmt.Sprintf("/workspace/beer/%d/overview", beer.ID)) }
						class="rounded-full p-2 opacity-0 transition-opacity duration-200 hover:bg-gray-100 group-hover:opacity-100"
					>
						<svg class="h-4 w-4" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" xmlns="http://www.w3.org/2000/svg">
							<path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"></path>
							<path d="m15 5 4 4"></path>
						</svg>
						<span class="sr-only">Edit</span>
					</a>
				</div>
				<div class="mb-4 flex flex-wrap gap-1">
					for _, media := range beer.BeerMedias {
						<div
							x-data={ fmt.Sprintf("{ isIntersected: false, imageSrc: 'https://collection-new.filimonov.life/cdn-cgi/image/width=100,quality=25/https://beer-collection-bucket.s3.eu-central-1.amazonaws.com/original/%s' }", media.Media.ExternalFilename) }
							x-intersect.threshold.25="isIntersected = true"
							class={ "flex justify-center items-center overflow-hidden", templ.KV("order-first w-12", media.Type == model.BeerMediaBottle), templ.KV("order-last", media.Type == model.BeerMediaLabel), templ.KV("w-32", media.Type != model.BeerMediaBottle) }
						>
							<img
								x-bind:src="isIntersected ? `${imageSrc}` : `/assets/img/tail-spin.svg`"
								class={ "max-h-32", templ.KV("w-12", media.Type == model.BeerMediaBottle), templ.KV("w-full", media.Type.IsCap()) }
								alt=""
							/>
						</div>
					}
				</div>
				if beer.Brewery != nil {
					<div class="mb-4 space-y-2">
						<div class="flex items-center gap-2 text-gray-600">
							<svg class="h-4 w-4" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" xmlns="http://www.w3.org/2000/svg">
								<path d="M6 22V4a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v18Z"></path><path d="M6 12H4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h2"></path><path d="M18 9h2a2 2 0 0 1 2 2v9a2 2 0 0 1-2 2h-2"></path><path d="M10 6h4"></path><path d="M10 10h4"></path><path d="M10 14h4"></path><path d="M10 18h4"></path>
							</svg>
							<span class="text-sm">{ beer.Brewery.Name }</span>
						</div>
						<div class="flex items-center gap-2 text-gray-600">
							<svg class="h-4 w-4" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" xmlns="http://www.w3.org/2000/svg">
								<path d="M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z"></path><circle cx="12" cy="10" r="3"></circle>
							</svg>
							<span class="text-sm">{ beer.Brewery.City.Name }, { beer.Brewery.City.Country.NameCommon }</span>
						</div>
					</div>
				}
				if beer.GetCapSlots() != nil && len(beer.GetCapSlots()) != 0 {
					<div class="mb-4 space-y-2">
						<div class="flex items-center gap-2 text-gray-600">
							<svg class="h-4 w-4" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" xmlns="http://www.w3.org/2000/svg">
								<rect width="18" height="18" x="3" y="3" rx="2" ry="2"></rect><line x1="3" x2="21" y1="9" y2="9"></line><line x1="3" x2="21" y1="15" y2="15"></line><line x1="9" x2="9" y1="9" y2="21"></line><line x1="15" x2="15" y1="9" y2="21"></line>
							</svg>
							for _, slot := range beer.GetCapSlots() {
								<span class="text-sm">{ slot }</span>
							}
						</div>
					</div>
				}
				if beer.BeerStyle != nil {
					<div class="flex items-center justify-between">
						<span class="rounded-full bg-gray-200 px-2 py-1 text-sm text-gray-700">{ beer.BeerStyle.Name }</span>
					</div>
				}
			</div>
			if idx == len(data.Beers)-1 && data.CurrentPage < data.TotalPages {
				<span
					hx-get={ fmt.Sprintf("/beers?page=%d&query=%s", data.CurrentPage+1, data.Query) }
					hx-trigger="intersect once"
					hx-swap="beforeend"
					hx-target="#beer-list"
					hx-indicator=".htmx-indicator"
					hx-target-error="#load-more-errors"
				></span>
			}
		</div>
	}
}
