package workspace

import (
	"fmt"
	"github.com/my-pet-projects/collection/internal/model"
	"github.com/my-pet-projects/collection/internal/view/layout"
	"net/url"
	"strconv"
)

type BeerListData struct {
	Beers        []model.Beer
	Query        string
	CurrentPage  int
	TotalPages   int
	TotalResults int
	LimitPerPage int
}

func (d BeerListData) CalculateDisplayedCount() int {
	displayed := d.CurrentPage * d.LimitPerPage
	if displayed > d.TotalResults {
		return d.TotalResults
	}
	return displayed
}

templ LoadingShimmer(cardsCount ...int) {
	{{
		shimmerCount := 6
		if len(cardsCount) > 0 {
			shimmerCount = cardsCount[0]
		}
	}}
	for i := 0; i < shimmerCount; i++ {
		@BeerCardSkeleton()
	}
}

templ BeerListPage(page BeerListPageData) {
	@layout.BaseLayout() {
		<!-- Header Section -->
		<div class="py-8">
			<div class="flex flex-col gap-6 lg:flex-row lg:items-center lg:justify-between">
				<!-- Title Section -->
				<div class="flex items-center space-x-3 space-y-1">
					<div class="p-2">
						<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-slate-800" title="Beer Collection Icon">
							<path d="M17 11h1a3 3 0 0 1 0 6h-1"></path>
							<path d="M9 12v6"></path>
							<path d="M13 12v6"></path>
							<path d="M14 7.5c-1 0-1.44.5-3 .5s-2-.5-3-.5-1.72.5-2.5.5a2.5 2.5 0 0 1 0-5c.78 0 1.57.5 2.5.5s2-.5 3-.5 2 .5 3 .5 1.72-.5 2.5-.5a2.5 2.5 0 0 1 0 5c-.78 0-1.5-.5-2.5-.5Z"></path>
							<path d="M5 8v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V8"></path>
						</svg>
					</div>
					<div>
						<h1 class="text-2xl font-bold text-gray-900 sm:text-3xl">Beer Collection</h1>
						<p class="text-gray-600">Discover and catalog your favorite brews</p>
					</div>
				</div>
				<!-- Add Beer Button -->
				<div class="flex-shrink-0">
					<a
						href="/workspace/beer/create"
						class="group inline-flex h-10 w-full items-center justify-center gap-2 whitespace-nowrap rounded-md bg-black px-4 py-2 text-sm font-semibold text-white shadow-md transition-all duration-300 hover:bg-gray-800 hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-opacity-50 active:bg-gray-900 sm:w-auto"
					>
						<svg class="mr-2 h-4 w-4 transition-transform duration-300 group-hover:rotate-90 group-focus:rotate-90" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
						</svg>
						Add Beer
					</a>
				</div>
			</div>
		</div>
		<div class="pb-8">
			<div class="rounded-lg border border-gray-200 bg-white shadow">
				<div
					x-data="{ searching: false, hasErrors: false, loadingMore: false }"
					hx-ext="response-targets"
					class="px-6 py-5"
				>
					<!-- Search Section -->
					<form
						id="search-form"
						hx-get="/beers"
						hx-swap="innerHTML"
						hx-target="#beer-grid"
						hx-trigger="load, keyup changed delay:500ms from:#search, autocomplete-selected from:body"
						hx-target-error="#beer-list-errors"
						x-on:htmx:before-request="searching = true"
						x-on:htmx:after-request="searching = false"
						x-on:htmx:response-error="searching = false; hasErrors = true;"
						x-on:htmx:config-request="
							const params = new URLSearchParams();
							const searchValue = document.getElementById('search')?.value?.trim();
							const countryValue = document.querySelector('[name=country]')?.value;
							
							if (searchValue) {
								params.set('query', searchValue);
							}
							if (countryValue) {
								params.set('country', countryValue);
							}
							
							// Override the parameters
							event.detail.parameters = Object.fromEntries(params.entries());						
						"
						hx-on::after-request="
							const form = event.target;
							const formData = new FormData(form);
							const params = new URLSearchParams();
							
							for (let [key, value] of formData.entries()) {
								if (value.trim()) {
									params.set(key, value.trim());
								}
							}
							
							const newUrl = '/workspace/beer' + (params.toString() ? '?' + params.toString() : '');
							
							history.pushState(null, '', newUrl.toString());
						"
						class="flex flex-col gap-4 sm:flex-row sm:items-stretch"
					>
						<!-- Search Input -->
						<div class="relative flex-1">
							<input
								id="search"
								name="query"
								type="text"
								class="block w-full rounded-md border border-gray-300 bg-white py-2 pl-10 pr-3 leading-5 placeholder-gray-500 focus:border-gray-500 focus:placeholder-gray-400 focus:outline-none focus:ring-1 focus:ring-gray-500"
								placeholder="Search beers by name or brewery..."
								aria-label="Search beers"
							/>
							<div
								x-show="!searching"
								class="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3"
							>
								<svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-4.35-4.35M17 10a7 7 0 11-14 0 7 7 0 0114 0z"></path>
								</svg>
							</div>
							<!-- Loading indicator -->
							<div
								x-show="searching"
								class="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3"
							>
								<div class="h-5 w-5 animate-spin rounded-full border-2 border-gray-300 border-t-black"></div>
							</div>
						</div>
						<!-- Country Filter -->
						<div class="h-10 w-full sm:w-80" id="country-filter-container">
							<!-- This will be populated by the separate HTMX request -->
						</div>
					</form>
					<!-- Separate element to load the country filter -->
					<div
						hx-get="/geo/countries?hasBreweries=true&useAlpineComponent=true"
						hx-swap="innerHTML"
						hx-target="#country-filter-container"
						hx-trigger="load"
						style="display: none;"
					></div>
				</div>
			</div>
		</div>
		<!-- Error Messages -->
		<div
			id="beer-list-errors"
			class="mb-4 rounded-md bg-red-50 p-4 text-sm text-red-700"
			x-show="hasErrors"
			aria-live="polite"
		></div>
		<!-- Controls Section -->
		<div class="mb-4 flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
			<!-- Search Results Count -->
			<div class="order-2 text-sm text-gray-600 sm:order-1 sm:text-base">
				<span id="results-count" class="mb-4 text-sm text-gray-600 sm:text-base" aria-label="Search results count"></span>
			</div>
			<!-- Layout Toggle -->
		</div>
		<!-- Results Section -->
		<div class="pb-8">
			<!-- Beer Grid Container -->
			<div
				id="beer-grid"
				x-show="!searching"
				x-transition:enter="transition ease-out duration-300"
				x-transition:enter-start="opacity-0 transform scale-98"
				x-transition:enter-end="opacity-100 transform scale-100"
				class="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3"
			></div>
			<!-- Loading Shimmer -->
			<div
				x-show="searching"
				x-transition:enter="transition ease-out duration-300"
				x-transition:enter-start="opacity-0"
				x-transition:enter-end="opacity-100"
				class="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3"
			>
				@LoadingShimmer(3)
			</div>
		</div>
		<!-- Page Info -->
		<div class="mt-8 border-t border-gray-200 pt-6">
			<div id="page-info" class="text-center">
				<!-- This will be updated via HTMX -->
			</div>
		</div>
	}
}

templ BeerList(data BeerListData) {
	<!-- Page Info (for out-of-band swap) -->
	<div id="results-count" hx-swap-oob="true" class="text-sm text-gray-600">
		Displaying <span class="font-semibold text-gray-800">{ fmt.Sprintf("%d", data.CalculateDisplayedCount()) }</span> out of <span class="font-semibold text-gray-800">{ fmt.Sprintf("%d", data.TotalResults) }</span> beers
	</div>
	<div id="page-info" hx-swap-oob="true">
		if data.TotalResults > 0 {
			<div class="rounded-lg bg-gray-50 px-4 py-3">
				<div class="flex flex-col items-center gap-2 text-sm">
					<!-- Main count -->
					<div class="font-semibold text-gray-900">
						{ fmt.Sprintf("%d", len(data.Beers) * data.CurrentPage) } of { fmt.Sprintf("%d", data.TotalResults) } beers
					</div>
					<!-- Progress bar -->
					<div class="w-full max-w-xs">
						<div class="h-2 w-full rounded-full bg-gray-200">
							<div
								class="h-2 rounded-full bg-blue-600 transition-all duration-300"
								style={ fmt.Sprintf("width: %.1f%%", float64(len(data.Beers)*data.CurrentPage)/float64(data.TotalResults)*100) }
							></div>
						</div>
					</div>
					<!-- Page indicator -->
					if data.TotalPages > 1 {
						<div class="text-xs text-gray-600">
							Page { fmt.Sprintf("%d", data.CurrentPage) } of { fmt.Sprintf("%d", data.TotalPages) }
						</div>
					}
				</div>
			</div>
		} else {
			<div class="rounded-lg bg-gray-50 px-4 py-3 text-center text-sm text-gray-600">
				No results to display
			</div>
		}
	</div>
	if data.TotalResults == 0 {
		<!-- No Results -->
		<div class="flex flex-col items-center justify-center py-16 text-center">
			<svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mb-6 text-gray-400">
				<path d="M17 11h1a3 3 0 0 1 0 6h-1"></path>
				<path d="M9 12v6"></path>
				<path d="M13 12v6"></path>
				<path d="M14 7.5c-1 0-1.44.5-3 .5s-2-.5-3-.5-1.72.5-2.5.5a2.5 2.5 0 0 1 0-5c.78 0 1.57.5 2.5.5s2-.5 3-.5 2 .5 3 .5 1.72-.5 2.5-.5a2.5 2.5 0 0 1 0 5c-.78 0-1.5-.5-2.5-.5Z"></path>
				<path d="M5 8v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V8"></path>
			</svg>
			<div class="mb-3 text-xl text-gray-500">No beers found</div>
			<div class="text-sm text-gray-400">Try adjusting your search or filters</div>
		</div>
	} else {
		<!-- Beer Cards -->
		for _, beer := range data.Beers {
			@beerCard(beer)
		}
		<!-- Load More Trigger -->
		if data.CurrentPage < data.TotalPages {
			<div
				id="load-more-trigger"
				hx-get={ fmt.Sprintf("/beers?page=%d&query=%s", data.CurrentPage+1, url.QueryEscape(data.Query)) }
				hx-trigger="intersect once threshold:0.8"
				hx-swap="beforeend"
				hx-target="#beer-grid"
				hx-target-error="#beer-list-errors"
				x-on:htmx:response-error="hasErrors = true"
				x-on:htmx:before-request="loadingMore = true"
				x-on:htmx:after-request="loadingMore = false; $el.remove()"
				class="invisible h-20 w-full"
				aria-hidden="true"
			></div>
		}
		<!-- Loading more indicator -->
		<div
			x-show="loadingMore"
			x-transition:enter="transition ease-out duration-300"
			x-transition:enter-start="opacity-0 transform translate-y-4"
			x-transition:enter-end="opacity-100 transform translate-y-0"
			class="col-span-full py-8 text-center"
		>
			<div class="inline-flex items-center gap-2 rounded-full bg-blue-50 px-4 py-2 text-sm font-medium text-blue-700">
				<svg class="h-4 w-4 animate-spin" fill="none" viewBox="0 0 24 24">
					<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
					<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
				</svg>
				<span>Loading more beers...</span>
			</div>
		</div>
	}
}

// Helper function to build next page URL (you'll need to implement this in Go)
func buildNextPageURL(data BeerListData) string {
	params := url.Values{}
	params.Set("page", strconv.Itoa(data.CurrentPage+1))
	if data.Query != "" {
		params.Set("query", data.Query)
	}
	return "/beers?" + params.Encode()
}
