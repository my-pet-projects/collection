package workspace

import (
	"fmt"
	"github.com/my-pet-projects/collection/internal/model"
	"github.com/my-pet-projects/collection/internal/view/layout"
	"net/url"
	"strconv"
	"strings"
)

type BeerListData struct {
	Beers        []model.Beer
	Query        string
	CurrentPage  int
	TotalPages   int
	TotalResults int
}

templ LoadingShimmer(cardsCount ...int) {
	{{
		shimmerCount := 6
		if len(cardsCount) > 0 {
			shimmerCount = cardsCount[0]
		}
	}}
	for i := 0; i < shimmerCount; i++ {
		@BeerCardSkeleton()
	}
}

templ BeerCardSkeleton() {
	<div class="overflow-hidden rounded-xl bg-white shadow-md sm:rounded-2xl">
		<div class="p-4 sm:p-6">
			<!-- Header skeleton -->
			<div class="mb-4 flex items-center justify-between sm:mb-6">
				<div class="flex min-w-0 flex-1 items-center space-x-3 sm:space-x-4">
					<!-- Flag skeleton -->
					<div class="h-5 w-7 animate-pulse rounded bg-gray-200"></div>
					<!-- Title skeleton -->
					<div class="min-w-0 flex-1">
						<div class="h-6 w-3/4 animate-pulse rounded bg-gray-200 sm:h-7"></div>
					</div>
				</div>
				<!-- Edit button skeleton -->
				<div class="h-8 w-8 animate-pulse rounded-full bg-gray-200"></div>
			</div>
			<!-- Images skeleton -->
			<div class="mb-3 flex flex-wrap items-end gap-2 rounded-lg bg-gray-50 p-2 sm:flex-nowrap">
				<!-- Bottle skeleton -->
				<div class="flex h-20 w-12 animate-pulse items-center justify-center rounded-lg bg-gray-200 sm:h-28 sm:w-14"></div>
				<!-- Cap skeleton -->
				<div class="h-20 w-20 animate-pulse rounded-full bg-gray-200 sm:h-28 sm:w-28"></div>
				<!-- Label skeleton -->
				<div class="flex h-20 w-full animate-pulse items-center justify-center rounded-lg bg-gray-200 sm:h-28"></div>
			</div>
			<!-- Info section skeleton -->
			<div class="mb-4 space-y-3 sm:mb-6">
				<!-- Brewery info -->
				<div class="flex items-center gap-2 sm:gap-3">
					<div class="h-6 w-6 animate-pulse rounded-md bg-gray-200 sm:h-8 sm:w-8"></div>
					<div class="h-4 w-1/2 animate-pulse rounded bg-gray-200"></div>
				</div>
				<!-- Location info -->
				<div class="flex items-center gap-2 sm:gap-3">
					<div class="h-6 w-6 animate-pulse rounded-md bg-gray-200 sm:h-8 sm:w-8"></div>
					<div class="h-4 w-2/3 animate-pulse rounded bg-gray-200"></div>
				</div>
			</div>
			<!-- Badge skeleton -->
			<div class="flex items-center">
				<div class="h-8 w-24 animate-pulse rounded-full bg-gray-200"></div>
			</div>
		</div>
	</div>
}

templ BeerListPage(page BeerPageData) {
	@layout.BaseLayout() {
		@beersList()
	}
}

templ beersList() {
	<div class="container mx-auto px-3 py-4 sm:px-4 lg:px-6">
		<!-- Header Section -->
		<div class="mb-4 flex flex-col gap-3 sm:mb-6 sm:flex-row sm:items-center sm:justify-between">
			<h1 class="text-2xl font-bold text-slate-800 sm:text-3xl">Beer Collection</h1>
			<a
				href="/workspace/beer/create"
				class="inline-flex h-10 w-full items-center justify-center gap-2 whitespace-nowrap rounded-md bg-black px-4 py-2 text-sm font-semibold text-white shadow-md transition-all duration-300 hover:bg-gray-800 hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-opacity-50 sm:w-auto"
				type="button"
			>
				<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-plus">
					<path d="M5 12h14"></path><path d="M12 5v14"></path>
				</svg>
				<span class="sm:inline">Add Beer</span>
			</a>
		</div>
		<div x-data="{ searching: false }">
			<!-- Search Section -->
			<div class="relative mb-4 sm:mb-6">
				<input
					id="search"
					name="query"
					type="text"
					hx-get="/beers"
					hx-swap="innerHTML"
					hx-target="#beer-list"
					hx-trigger="keyup changed delay:500ms from:#search"
					@htmx:before-request="searching = true"
					@htmx:after-request="searching = false"
					class="mb-0 flex h-12 w-full rounded-lg border border-gray-300 bg-white px-4 py-3 pr-12 text-base placeholder:text-gray-500 focus:border-black focus:ring-2 focus:ring-black focus:ring-opacity-20 focus-visible:outline-none sm:h-10 sm:text-sm"
					placeholder="Search beers or breweries..."
				/>
				<svg class="absolute right-3 top-1/2 h-5 w-5 -translate-y-1/2 transform text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-4.35-4.35M17 10a7 7 0 11-14 0 7 7 0 0114 0z"></path>
				</svg>
			</div>
			<!-- Error Messages -->
			<div id="beer-list-errors" class="mb-4"></div>
			<!-- Results Counter -->
			<div class="mb-4 text-sm text-gray-600 sm:text-base">
				<span id="results-count" class="font-medium"></span>
			</div>
			<!-- Beer Grid - hidden during search -->
			<div
				id="beer-list"
				x-show="!searching"
				hx-get="/beers"
				hx-swap="innerHTML"
				hx-target="#beer-list"
				hx-trigger="load"
				class="grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3"
			>
				<!-- Initial loading shimmer -->
				@LoadingShimmer()
			</div>
			<!-- Search Shimmer (hidden by default, shown during search) -->
			<div
				x-show="searching"
				class="grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3"
			>
				@LoadingShimmer(3)
			</div>
			<!-- Loading Indicator for load more -->
			<div class="flex justify-center py-8">
				<img class="htmx-indicator h-8 w-8" alt="Loading..." src="/assets/img/tail-spin.svg"/>
			</div>
			<!-- Load More Errors -->
			<div id="load-more-errors" class="p-4"></div>
		</div>
	</div>
}

templ BeerList(data BeerListData) {
	for idx, beer := range data.Beers {
		<div class="group overflow-hidden rounded-xl bg-white shadow-md transition-all duration-300 hover:shadow-lg sm:rounded-2xl sm:hover:-translate-y-2 sm:hover:shadow-xl">
			<div class="p-4 sm:p-6">
				<!-- Header -->
				<div class="mb-4 flex items-center justify-between sm:mb-6">
					<!-- Brand and Country -->
					<div class="flex min-w-0 flex-1 items-center space-x-3 sm:space-x-4">
						if beer.HasCountry() {
							<div class="flex-shrink-0">
								{{ countryCode := beer.GetCountry().Cca2 }}
								<img
									src={ fmt.Sprintf("https://flagcdn.com/w40/%s.png", strings.ToLower(countryCode)) }
									alt={ fmt.Sprintf("%s flag", countryCode) }
									class="h-5 w-7 rounded border border-white object-cover shadow-sm ring-1 ring-gray-200"
								/>
							</div>
						}
						<div class="min-w-0 flex-1">
							<div class="flex items-center gap-2">
								<h2 class="truncate text-lg font-bold tracking-tight text-slate-800 sm:text-xl lg:text-2xl">{ beer.Brand }</h2>
								<span class="flex-shrink-0 text-xs text-slate-400 sm:text-sm">#{ strconv.Itoa(beer.ID) }</span>
							</div>
						</div>
					</div>
					<!-- Edit Button -->
					<a
						href={ templ.URL(fmt.Sprintf("/workspace/beer/%d/overview", beer.ID)) }
						type="button"
						class="flex h-8 w-8 items-center justify-center rounded-full bg-gray-100 text-gray-600 transition-all duration-200 hover:bg-gray-200 hover:text-gray-800 sm:opacity-0 sm:group-hover:opacity-100"
						aria-label="Edit beer"
					>
						<svg class="h-4 w-4" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
							<path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"></path>
							<path d="m15 5 4 4"></path>
						</svg>
					</a>
				</div>
				<!-- Images Section -->
				<div class="mb-3 flex flex-wrap items-end gap-2 rounded-lg bg-gray-50 p-2 sm:flex-nowrap">
					for _, media := range beer.BeerMedias {
						if media.Type.IsBottle() {
							@bottleImage(media)
						} else if media.Type.IsCap() {
							@capImage(media)
						} else if media.Type.IsLabel() {
							@labelImage(media)
						}
					}
				</div>
				<!-- Info Section -->
				<div class="mb-4 space-y-2 sm:mb-6 sm:space-y-3">
					if beer.HasBrewery() {
						{{ brewery := beer.Brewery }}
						<div class="flex items-center gap-2 text-slate-600 sm:gap-3">
							<div class="flex h-6 w-6 flex-shrink-0 items-center justify-center rounded-md bg-blue-50 text-blue-600 sm:h-8 sm:w-8 sm:rounded-lg">
								<svg class="h-3 w-3 sm:h-4 sm:w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-7 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
								</svg>
							</div>
							<span class="min-w-0 flex-1 truncate text-xs font-medium sm:text-sm">{ brewery.Name }</span>
						</div>
						<div class="flex items-center gap-2 text-slate-600 sm:gap-3">
							<div class="flex h-6 w-6 flex-shrink-0 items-center justify-center rounded-md bg-emerald-50 text-emerald-600 sm:h-8 sm:w-8 sm:rounded-lg">
								<svg class="h-3 w-3 sm:h-4 sm:w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
								</svg>
							</div>
							<span class="min-w-0 flex-1 truncate text-xs font-medium sm:text-sm">{ brewery.GetCityName() }, { brewery.GetCountryName() }</span>
						</div>
					}
					if beer.HasCapSlots() {
						{{ capSlots := beer.GetCapSlots() }}
						<div class="flex items-center gap-2 text-slate-600 sm:gap-3">
							<div class="flex h-6 w-6 flex-shrink-0 items-center justify-center rounded-md bg-purple-50 text-purple-600 sm:h-8 sm:w-8 sm:rounded-lg">
								<svg class="h-3 w-3 sm:h-4 sm:w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2v2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
								</svg>
							</div>
							<div class="flex min-w-0 flex-1 flex-wrap gap-1">
								for _, slot := range capSlots {
									<span class="text-xs font-medium sm:text-sm">{ slot }</span>
								}
							</div>
						</div>
					}
				</div>
				<!-- Badge section -->
				if beer.HasBeerStyle() {
					<div class="flex items-center">
						<!-- Beer Style Badge -->
						<div class="inline-flex items-center rounded-full border border-slate-300/50 bg-gradient-to-r from-slate-100 to-slate-200 px-3 py-1.5 shadow-sm sm:px-4 sm:py-2">
							<span class="text-xs font-medium text-slate-700 sm:text-sm">{ beer.BeerStyle.Name }</span>
						</div>
					</div>
				}
			</div>
			<!-- Load More Trigger -->
			if idx == len(data.Beers)-1 && data.CurrentPage < data.TotalPages {
				<span
					hx-get={ fmt.Sprintf("/beers?page=%d&query=%s", data.CurrentPage+1, url.QueryEscape(data.Query)) }
					hx-trigger="intersect once"
					hx-swap="beforeend"
					hx-target="#beer-list"
					hx-indicator=".htmx-indicator"
					hx-target-error="#load-more-errors"
				></span>
			}
		</div>
	}
}

const (
	cdnBaseURL = "https://collection-new.filimonov.life/cdn-cgi/image"
	s3BaseURL  = "https://beer-collection-bucket.s3.eu-central-1.amazonaws.com/original"
)

templ bottleImage(media model.BeerMedia) {
	<div
		x-data={ fmt.Sprintf(`{
            isIntersected: false,
            imageLoaded: false,
            imageSrc: '%s/width=100,quality=25/%s/%s'
        }`, cdnBaseURL, s3BaseURL, media.Media.ExternalFilename) }
		x-intersect.threshold.25="isIntersected = true"
		class="order-first flex flex-shrink-0 items-end justify-center"
	>
		<div class="flex h-20 w-12 items-center justify-center rounded-lg border border-slate-200/60 bg-white p-1.5 shadow-sm transition duration-300 ease-in-out hover:scale-105 sm:h-28 sm:w-14 sm:rounded-xl sm:p-2">
			<!-- Shimmer placeholder -->
			<div
				x-show="isIntersected && !imageLoaded"
				class="h-full w-full animate-pulse rounded-lg bg-slate-200"
			></div>
			<!-- Actual image -->
			<img
				x-bind:class="imageLoaded ? 'h-full w-auto object-contain opacity-100 transition-opacity duration-700 ease-out' : 'h-full w-auto object-contain opacity-0 absolute transition-opacity duration-700 ease-out'"
				x-bind:src="isIntersected ? imageSrc : null"
				@load="imageLoaded = true"
				@error="imageLoaded = true"
				alt="bottle image"
				loading="lazy"
				decoding="async"
			/>
		</div>
	</div>
}

templ capImage(media model.BeerMedia) {
	<div
		x-data={ fmt.Sprintf(`{
            isIntersected: false,
            imageLoaded: false,
            imageSrc: '%s/width=100,quality=25/%s/%s'
        }`, cdnBaseURL, s3BaseURL, media.Media.ExternalFilename) }
		x-intersect.threshold.25="isIntersected = true"
		class="flex flex-shrink-0 items-end justify-center"
	>
		<div class="flex h-20 w-20 items-center justify-center rounded-full border border-slate-200/60 bg-white p-1.5 shadow-sm transition duration-300 ease-in-out hover:scale-105 sm:h-28 sm:w-28 sm:p-2">
			<!-- Shimmer placeholder -->
			<div
				x-show="isIntersected && !imageLoaded"
				class="h-full w-full animate-pulse rounded-full bg-slate-200"
			></div>
			<!-- Actual image -->
			<img
				x-bind:class="imageLoaded ? 'h-full w-auto object-contain opacity-100 transition-opacity duration-700 ease-out' : 'h-full w-auto object-contain opacity-0 absolute transition-opacity duration-700 ease-out'"
				x-bind:src="isIntersected ? imageSrc : null"
				@load="imageLoaded = true"
				@error="imageLoaded = true"
				alt="cap image"
				loading="lazy"
				decoding="async"
			/>
		</div>
	</div>
}

templ labelImage(media model.BeerMedia) {
	<div
		x-data={ fmt.Sprintf(`{
            isIntersected: false,
            imageLoaded: false,
            imageSrc: '%s/width=100,quality=25/%s/%s'
        }`, cdnBaseURL, s3BaseURL, media.Media.ExternalFilename) }
		x-intersect.threshold.25="isIntersected = true"
		class="order-last flex min-w-0 flex-1 items-end justify-center"
	>
		<div class="flex h-20 w-full items-center justify-center overflow-hidden rounded-lg border border-slate-200/60 bg-white p-1.5 shadow-sm transition duration-300 ease-in-out hover:scale-105 sm:h-28 sm:rounded-xl sm:p-2">
			<!-- Shimmer placeholder -->
			<div
				x-show="isIntersected && !imageLoaded"
				class="h-full w-full animate-pulse rounded-lg bg-slate-200"
			></div>
			<!-- Actual image -->
			<img
				x-bind:class="imageLoaded ? 'h-full w-auto object-contain opacity-100 transition-opacity duration-700 ease-out' : 'h-full w-auto object-contain opacity-0 absolute transition-opacity duration-700 ease-out'"
				x-bind:src="isIntersected ? imageSrc : null"
				@load="imageLoaded = true"
				@error="imageLoaded = true"
				alt="label image"
				loading="lazy"
				decoding="async"
			/>
		</div>
	</div>
}
