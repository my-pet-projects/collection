// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.793
package shared

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func Notification() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div x-data=\"{\n            notifications: [],\n            displayDuration: 8000,\n    \n            addNotification({ variant = &#39;success&#39;, title = null, message = null, xhrResponse = null }) {\n\t\t\t\tif(xhrResponse) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst parser = new DOMParser();\n\t\t\t\t\t\tconst doc = parser.parseFromString(xhrResponse, &#39;text/html&#39;);\n\t\t\t\t\t\ttitle = doc.querySelector(&#39;[data-message]&#39;)?.textContent; \n\t\t\t\t\t\tmessage = doc.querySelector(&#39;[data-error]&#39;)?.textContent; \n\t\t\t\t\t} catch(err) {\n\t\t\t\t\t\tconsole.error(&#39;Failed to parse response!&#39;, err)\n\t\t\t\t\t}\n\t\t\t\t}\n                const id = Date.now()\n                const notification = { id, variant, title, message }\n\t\t\t\t\n                // Keep only the most recent 20 notifications\n                if (this.notifications.length &gt;= 20) {\n                    this.notifications.splice(0, this.notifications.length - 19)\n                }\n    \n                // Add the new notification to the notifications stack\n                this.notifications.push(notification)\n    \n            },\n            removeNotification(id) {\n                setTimeout(() =&gt; {\n                    this.notifications = this.notifications.filter(\n                        (notification) =&gt; notification.id !== id,\n                    )\n                }, 400);\n            },\n        }\" x-on:notify.window=\"addNotification({\n                variant: $event.detail.variant,\n                title: $event.detail.title,\n                message: $event.detail.message,\n\t\t\t\txhrResponse: $event.detail.xhrResponse\n    })\"><div x-on:mouseenter=\"$dispatch(&#39;pause-auto-dismiss&#39;)\" x-on:mouseleave=\"$dispatch(&#39;resume-auto-dismiss&#39;)\" class=\"group pointer-events-none fixed inset-x-8 bottom-0 z-99 flex max-w-full flex-col gap-2 bg-transparent px-6 py-6 md:bottom-0 md:left-[unset] md:right-0 md:top-[unset] md:max-w-sm\"><template x-for=\"(notification, index) in notifications\" x-bind:key=\"notification.id\"><div><!-- Success Notification  --><template x-if=\"notification.variant === &#39;success&#39;\"><div x-data=\"{ isVisible: false, timeout: null }\" x-cloak x-show=\"isVisible\" class=\"pointer-events-auto relative rounded-md border border-green-500 bg-white text-neutral-600 dark:bg-neutral-950 dark:text-neutral-300\" role=\"alert\" x-on:pause-auto-dismiss.window=\"clearTimeout(timeout)\" x-on:resume-auto-dismiss.window=\" timeout = setTimeout(() =&gt; {(isVisible = false), removeNotification(notification.id) }, displayDuration)\" x-init=\"$nextTick(() =&gt; { isVisible = true }), (timeout = setTimeout(() =&gt; { isVisible = false, removeNotification(notification.id)}, displayDuration))\" x-transition:enter=\"transition duration-300 ease-out\" x-transition:enter-end=\"translate-y-0\" x-transition:enter-start=\"translate-y-8\" x-transition:leave=\"transition duration-300 ease-in\" x-transition:leave-end=\"-translate-x-24 opacity-0 md:translate-x-24\" x-transition:leave-start=\"translate-x-0 opacity-100\"><div class=\"flex w-full items-center gap-2.5 rounded-md bg-green-500/10 p-4 transition-all duration-300\"><div class=\"bg-green-500/15 rounded-full p-0.5 text-green-500\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" class=\"size-5\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M10 18a8 8 0 1 0 0-16 8 8 0 0 0 0 16Zm3.857-9.809a.75.75 0 0 0-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 1 0-1.06 1.061l2.5 2.5a.75.75 0 0 0 1.137-.089l4-5.5Z\" clip-rule=\"evenodd\"></path></svg></div><div class=\"flex flex-col gap-2\"><h3 x-cloak x-show=\"notification.title\" class=\"text-sm font-semibold text-green-500\" x-text=\"notification.title\"></h3><p x-cloak x-show=\"notification.message\" class=\"text-pretty text-sm\" x-text=\"notification.message\"></p></div><button type=\"button\" class=\"ml-auto\" aria-label=\"dismiss notification\" x-on:click=\"(isVisible = false), removeNotification(notification.id)\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" fill=\"none\" stroke-width=\"2\" class=\"size-5 shrink-0\" aria-hidden=\"true\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M6 18L18 6M6 6l12 12\"></path></svg></button></div></div></template><!-- Danger Notification  --><template x-if=\"notification.variant === &#39;danger&#39;\"><div x-data=\"{ isVisible: false, timeout: null }\" x-cloak x-show=\"isVisible\" class=\"pointer-events-auto relative rounded-md border border-red-500 bg-white text-neutral-600 dark:bg-neutral-950 dark:text-neutral-300\" role=\"alert\" x-on:pause-auto-dismiss.window=\"clearTimeout(timeout)\" x-on:resume-auto-dismiss.window=\" timeout = setTimeout(() =&gt; {(isVisible = false), removeNotification(notification.id) }, displayDuration)\" x-init=\"$nextTick(() =&gt; { isVisible = true }), (timeout = setTimeout(() =&gt; { isVisible = false, removeNotification(notification.id)}, displayDuration))\" x-transition:enter=\"transition duration-300 ease-out\" x-transition:enter-end=\"translate-y-0\" x-transition:enter-start=\"translate-y-8\" x-transition:leave=\"transition duration-300 ease-in\" x-transition:leave-end=\"-translate-x-24 opacity-0 md:translate-x-24\" x-transition:leave-start=\"translate-x-0 opacity-100\"><div class=\"flex w-full items-center gap-2.5 rounded-md bg-red-500/10 p-4 transition-all duration-300\"><div class=\"bg-red-500/15 rounded-full p-0.5 text-red-500\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" class=\"size-5\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M18 10a8 8 0 1 1-16 0 8 8 0 0 1 16 0Zm-8-5a.75.75 0 0 1 .75.75v4.5a.75.75 0 0 1-1.5 0v-4.5A.75.75 0 0 1 10 5Zm0 10a1 1 0 1 0 0-2 1 1 0 0 0 0 2Z\" clip-rule=\"evenodd\"></path></svg></div><div class=\"flex flex-col gap-2\"><h3 x-cloak x-show=\"notification.title\" x-text=\"notification.title\" class=\"text-sm font-semibold text-red-500\"></h3><p x-cloak x-show=\"notification.message\" x-text=\"notification.message\" class=\"text-pretty text-sm\"></p></div><button type=\"button\" class=\"ml-auto\" aria-label=\"dismiss notification\" x-on:click=\"(isVisible = false), removeNotification(notification.id)\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" fill=\"none\" stroke-width=\"2\" class=\"size-5 shrink-0\" aria-hidden=\"true\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M6 18L18 6M6 6l12 12\"></path></svg></button></div></div></template></div></template></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
