package shared

import (
	"fmt"
	"strconv"
	"strings"

	"github.com/my-pet-projects/collection/internal/model"
	"github.com/my-pet-projects/collection/internal/view/component/ui"
)

type CountriesData struct {
	Countries          []model.Country
	HasBreweries       bool
	PreselectedCountry string
	ShowAllOption      bool
}

func (c CountriesData) ToAutocompleteData() []ui.AutoCompleteData {
	data := make([]ui.AutoCompleteData, len(c.Countries))
	for i, country := range c.Countries {
		data[i] = ui.AutoCompleteData{
			Label: country.NameCommon,
			Value: strings.ToLower(country.Cca2),
			Image: fmt.Sprintf("https://flagcdn.com/%s.svg", strings.ToLower(country.Cca2)),
		}
	}
	return data
}

templ CountriesAutoComplete(countriesData CountriesData) {
	@ui.AutoComplete(ui.AutoCompleteProps{
		ID:               "country",
		Name:             "country",
		Data:             countriesData.ToAutocompleteData(),
		ShowAllOption:    countriesData.ShowAllOption,
		AllOptionLabel:   "All countries",
		AllOptionIcon:    "üåç",
		EventNamespace:   "country",
		ListenToEvents:   []string{"country-selected", "country-cleared"},
		PreselectedValue: strings.ToLower(countriesData.PreselectedCountry),
	})
}

type CitiesData struct {
	Cities          []model.City
	PreselectedCity string
	ShowAllOption   bool
}

func (c CitiesData) ToAutocompleteData() []ui.AutoCompleteData {
	data := make([]ui.AutoCompleteData, len(c.Cities))
	for i, city := range c.Cities {
		data[i] = ui.AutoCompleteData{
			Label: city.Name,
			Value: strconv.Itoa(city.ID),
		}
	}
	return data
}

templ CitiesAutoComplete(citiesData CitiesData) {
	@ui.AutoComplete(ui.AutoCompleteProps{
		ID:               "city",
		Name:             "city",
		Data:             citiesData.ToAutocompleteData(),
		ShowAllOption:    citiesData.ShowAllOption,
		AllOptionLabel:   "All cities",
		EventNamespace:   "city",
		PreselectedValue: citiesData.PreselectedCity,
	})
}
