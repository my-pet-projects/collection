package shared

import (
	"encoding/json"
	"fmt"
	"github.com/my-pet-projects/collection/internal/model"
)

type BreweriesData struct {
	Breweries       []model.Brewery
	SelectedBrewery *int
	HasError        bool
}

func (d BreweriesData) ToAutocompleteData() []AutoCompleteData {
	data := make([]AutoCompleteData, len(d.Breweries))
	for i, brewery := range d.Breweries {
		data[i] = AutoCompleteData{
			Label: brewery.Name,
			Value: fmt.Sprint(brewery.ID),
		}
	}
	return data
}

func breweriesJson(countriesData BreweriesData) string {
	choices := make([]choicesData, 0)
	selected := false
	if countriesData.SelectedBrewery == nil || *countriesData.SelectedBrewery == 0 {
		selected = true
	}
	emptyChoice := choicesData{
		Value:    "",
		Label:    "Select a brewery",
		Selected: selected,
		Disabled: false,
	}
	choices = append(choices, emptyChoice)
	for _, brewery := range countriesData.Breweries {
		selected := false
		if countriesData.SelectedBrewery != nil && *countriesData.SelectedBrewery == brewery.ID {
			selected = true
		}
		choices = append(choices, choicesData{
			Value:    fmt.Sprint(brewery.ID),
			Label:    brewery.Name,
			Selected: selected,
			Disabled: false,
			// CustomProperties: customProperty{SearchableValue: brewery.City.Country.NameCommon},
		})
	}
	bytes, _ := json.Marshal(choices)
	return string(bytes)
}

templ BrewerySelector(data BreweriesData) {
	<app-select
		name="brewery"
		data-items={ breweriesJson(data) }
	></app-select>
}

templ BreweriesAutocomplete(data BreweriesData) {
	{{
		props := AutoCompleteProps{
			ID:             "brewery",
			Name:           "brewery",
			Data:           data.ToAutocompleteData(),
			EventNamespace: "brewery",
			ShowLabel:      true,
			HasError:       data.HasError,
		}
		if data.SelectedBrewery != nil {
			props.PreselectedValue = fmt.Sprint(*data.SelectedBrewery)
		}
	}}
	@AutoComplete(props)
}
