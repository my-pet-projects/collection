package component

import "github.com/my-pet-projects/collection/internal/db"
import "fmt"

css border() {
	border: 1px solid #eeeeee;
	border-radius: 4px;
	margin: 10px;
	padding-top: 30px;
	padding-bottom: 30px;
}

templ counts() {
	<form id="countsForm" action="/" method="POST" hx-post="/" hx-select="#countsForm" hx-swap="outerHTML">
		<div class="columns">
			<div class={ "column", "has-text-centered", "is-primary", border }>
				<h1 class="title is-size-1 has-text-centered">1</h1>
				<p class="subtitle has-text-centered">Global</p>
				<div><button class="button is-primary" type="submit" name="global" value="global">+1</button></div>
			</div>
			<div class={ "column", "has-text-centered", border }>
				<h1 class="title is-size-1 has-text-centered">2</h1>
				<p class="subtitle has-text-centered">Session</p>
				<div><button class="button is-secondary" type="submit" name="session" value="session">+1</button></div>
			</div>
		</div>
	</form>
}

templ headerComponent(title string) {
	<head>
		<meta charset="UTF-8"/>
		<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
		<title>{ title }</title>
		<link rel="stylesheet" href="/assets/css/bulma.min.css"/>
		<link rel="apple-touch-icon" sizes="180x180" href="/assets/favicon/apple-touch-icon.png"/>
		<link rel="icon" type="image/png" sizes="32x32" href="/assets/favicon/favicon-32x32.png"/>
		<link rel="icon" type="image/png" sizes="16x16" href="/assets/favicon/favicon-16x16.png"/>
		<link rel="manifest" href="/assets/favicon/site.webmanifest"/>
		<link href="/css/tailwind-output.gen.css" rel="stylesheet"/>
		<link
			rel="stylesheet"
			href="https://cdn.jsdelivr.net/npm/choices.js/public/assets/styles/choices.min.css"
		/>
		<script src="https://unpkg.com/htmx.org@1.9.9" integrity="sha384-QFjmbokDn2DjBjq+fM+8LUIVrAgqcNW2s0PjAxHETgRn9l4fvX31ZxDxvwQnyMOX" crossorigin="anonymous"></script>
		<script src="https://unpkg.com/htmx.org@1.9.11/dist/ext/path-params.js">

		<script src="https://cdnjs.cloudflare.com/ajax/libs/flowbite/2.2.0/flowbite.min.js"></script>
		<script src="https://cdn.jsdelivr.net/npm/choices.js/public/assets/scripts/choices.min.js"></script>
		<script src="https://unpkg.com/hyperscript.org@0.9.12"></script>
	</head>
}

templ Page(countries []db.Country) {
	<html>
		@headerComponent("qwe")
		<body class="bg-gray-100">
			<header class="hero is-primary">
				<div class="hero-body">
					<div class="container">
						<h1 class="title">Counts</h1>
					</div>
				</div>
			</header>
			<section class="section">
				<div class="container">
					<div class="columns is-centered">
						<div class="column is-half">
							@counts()
						</div>
					</div>
				</div>
			</section>
			<div class="container mx-auto mt-8">
				@ComboboxCountries(countries)
			</div>
			<script type="text/javascript">
			 document.body.addEventListener("custom-event", () => {
				console.log("send-message event emitted in document");
			});
			</script>
		</body>
	</html>
}

templ ComboboxCountries(countries []db.Country) {
	<div hx-ext="path-params">
		<select
			id="country"
			name="country"
			autocomplete="off"
			hx-get="/geo/countries/{countryIso}/cities"
			hx-vals="js:{countryIso: event.target.value.toLowerCase()}"
			hx-trigger="change"
			hx-target="#cityContainer"
			hx-swap="innerHTML"
			hx-params="countryIso"
		>
			<option value="" disabled selected>Select a country</option>
			for _, country:=range countries {
				<option value={ strings.ToLower(country.Cca2) }>{ country.NameCommon }</option>
			}
		</select>
	</div>
	<script type="text/javascript">
		const countryChoices = new Choices('#country', {
          allowHTML: true,
          shouldSort: false,
		  classNames: {
      		containerOuter: 'choices',
			containerInner: 'choices__inner',
      		listSingle: '',
		  },
		  callbackOnCreateTemplates: function(template) {
			return {
				item: ({ classNames }, data) => {
					return template(`
					<div class="flex items-center ${classNames.item} ${data.highlighted	? classNames.highlightedState : classNames.itemSelectable} ${data.placeholder ? classNames.placeholder : ''}" 
						data-item 
						data-id="${data.id}" 
						data-value="${data.value.toLowerCase()}" ${data.active ? 'aria-selected="true"' : ''} ${data.disabled ? 'aria-disabled="true"' : ''}
					>
						<img class="rounded-md" src="https://flagcdn.com/w40/${data.value.toLowerCase()}.png" width="40" />
						<span class="ml-2">${data.label}</span>
					</div>
					`);
				},
				choice: ({ classNames }, data) => {
					return template(`
					<div class="flex items-center space-x-4 ${classNames.item} ${classNames.itemChoice} ${data.disabled ? classNames.itemDisabled : classNames.itemSelectable}" 
						data-select-text="${this.config.itemSelectText}" 
						data-choice ${data.disabled	? 'data-choice-disabled aria-disabled="true"' : 'data-choice-selectable'} 
						data-id="${data.id}" 
						data-value="${data.value.toLowerCase()}" 
						${data.groupId > 0 ? 'role="treeitem"' : 'role="option"'}>
						<img class="rounded-md" src="https://flagcdn.com/w40/${data.value.toLowerCase()}.png" width="40" />
						<span class="ml-2">${data.label}</span>
					</div>
					`);
				}
			};
		  }
        });
		countryChoices.passedElement.element.addEventListener(
			'choice',
			function(event) {
				var url = new URL(window.location.href);
				var params = new window.URLSearchParams(window.location.search);
				params.set("country", event.detail.choice.value);
				params.delete("city");
				url.search = params;
				window.history.replaceState(null, null, url);
			},
			false,
		);
		const urlParams = new URLSearchParams(window.location.search);
		const countryParam = urlParams.get('country');
		if (countryParam) {
			countryChoices.setChoiceByValue(countryParam);
		  	htmx.trigger("#country", "change", {countryIso:countryParam});
		}
	</script>
}

templ ComboboxCities(cities []db.City) {
	<div>
		<select
			id="city"
			name="city"
			autocomplete="off"
		>
			<option value="" disabled selected>Select a city</option>
			for _, city := range cities {
				<option value={ fmt.Sprint(city.Id) }>{ city.Name }</option>
			}
		</select>
		<script type="text/javascript">
		new Choices('#city', {
          allowHTML: true,
          shouldSort: false
        }).
		passedElement.element.addEventListener(
			'choice',
			function(event) {
				var url = new URL(window.location.href);
				var params = new window.URLSearchParams(window.location.search);
				params.set("city", event.detail.choice.value);
				url.search = params;
				window.history.replaceState(null, null, url);
			},
			false,
		);
	</script>
	</div>
}

templ BreweriesPage(breweries []db.Brewery) {
	<table class="min-w-full divide-y divide-gray-200 table-fixed dark:divide-gray-600">
		<thead class="bg-gray-100 dark:bg-gray-700">
			<tr>
				<th scope="col" class="p-4 text-xs font-medium text-left text-gray-500 uppercase dark:text-gray-400">
					Name
				</th>
				<th scope="col" class="p-4 text-xs font-medium text-left text-gray-500 uppercase dark:text-gray-400">
					Geography
				</th>
				<th>
					Action
				</th>
			</tr>
		</thead>
		<tbody class="bg-white divide-y divide-gray-200 dark:bg-gray-800 dark:divide-gray-700">
			for _, brewery := range breweries {
				<tr class="hover:bg-gray-100 dark:hover:bg-gray-700">
					<td class="p-4 text-base font-medium text-gray-900 whitespace-nowrap dark:text-white">{ brewery.Name }</td>
					<td class="flex items-center p-4 mr-12 space-x-6 whitespace-nowrap">
						<div class="text-sm font-normal text-gray-500 dark:text-gray-400">
							<div class="text-base font-semibold text-gray-900 dark:text-white">{ brewery.Country.NameCommon }</div>
							<div class="text-sm font-normal text-gray-500 dark:text-gray-400">{ brewery.City.Name }</div>
						</div>
					</td>
					<td class="p-4 space-x-2 whitespace-nowrap">
						<div class="flex items-center gap-2">
							<button class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 hover:bg-accent hover:text-accent-foreground h-10 w-10">
								<svg
									xmlns="http://www.w3.org/2000/svg"
									width="24"
									height="24"
									viewBox="0 0 24 24"
									fill="none"
									stroke="currentColor"
									stroke-width="2"
									stroke-linecap="round"
									stroke-linejoin="round"
									class="h-4 w-4"
									data-darkreader-inline-stroke=""
									style="--darkreader-inline-stroke: currentColor;"
								>
									<path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z"></path>
									<circle cx="12" cy="12" r="3"></circle>
								</svg>
								<span class="sr-only">View</span>
							</button>
							<button class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 hover:bg-accent hover:text-accent-foreground h-10 w-10">
								<svg
									xmlns="http://www.w3.org/2000/svg"
									width="24"
									height="24"
									viewBox="0 0 24 24"
									fill="none"
									stroke="currentColor"
									stroke-width="2"
									stroke-linecap="round"
									stroke-linejoin="round"
									class="h-4 w-4"
									data-darkreader-inline-stroke=""
									style="--darkreader-inline-stroke: currentColor;"
								>
									<path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"></path>
									<path d="m15 5 4 4"></path>
								</svg>
								<span class="sr-only">Edit</span>
							</button>
							<button class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 hover:bg-accent hover:text-accent-foreground h-10 w-10">
								<svg
									xmlns="http://www.w3.org/2000/svg"
									width="24"
									height="24"
									viewBox="0 0 24 24"
									fill="none"
									stroke="currentColor"
									stroke-width="2"
									stroke-linecap="round"
									stroke-linejoin="round"
									class="h-4 w-4"
									data-darkreader-inline-stroke=""
									style="--darkreader-inline-stroke: currentColor;"
								>
									<path d="M3 6h18"></path>
									<path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"></path>
									<path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"></path>
								</svg>
								<span class="sr-only">Delete</span>
							</button>
						</div>
					</td>
				</tr>
			}
		</tbody>
	</table>
}

templ BeersPage(beers []db.Beer) {
	<div>beers</div>
	for _, beer := range beers {
		<div>
			{ beer.Brand }
		</div>
	}
}
